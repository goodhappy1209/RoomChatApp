package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import co.roomapp.room.model.RAPhone;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RAPHONE.
*/
public class RAPhoneDao extends AbstractDao<RAPhone, Long> implements Serializable {

    public static final String TABLENAME = "RAPHONE";

    /**
     * Properties of entity RAPhone.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HasRoomApp = new Property(1, Boolean.class, "hasRoomApp", false, "HAS_ROOM_APP");
        public final static Property Label = new Property(2, String.class, "label", false, "LABEL");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Roomappid = new Property(4, String.class, "roomappid", false, "ROOMAPPID");
        public final static Property ContactId = new Property(5, long.class, "contactId", false, "CONTACT_ID");
    };

    private DaoSession daoSession;

    private Query<RAPhone> rAContact_PhonesQuery;

    public RAPhoneDao(DaoConfig config) {
        super(config);
    }
    
    public RAPhoneDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RAPHONE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'HAS_ROOM_APP' INTEGER," + // 1: hasRoomApp
                "'LABEL' TEXT," + // 2: label
                "'PHONE' TEXT," + // 3: phone
                "'ROOMAPPID' TEXT," + // 4: roomappid
                "'CONTACT_ID' INTEGER NOT NULL );"); // 5: contactId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RAPHONE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RAPhone entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean hasRoomApp = entity.getHasRoomApp();
        if (hasRoomApp != null) {
            stmt.bindLong(2, hasRoomApp ? 1l: 0l);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(3, label);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String roomappid = entity.getRoomappid();
        if (roomappid != null) {
            stmt.bindString(5, roomappid);
        }
        stmt.bindLong(6, entity.getContactId());
    }

    @Override
    protected void attachEntity(RAPhone entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RAPhone readEntity(Cursor cursor, int offset) {
        RAPhone entity = new RAPhone( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // hasRoomApp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // label
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // roomappid
            cursor.getLong(offset + 5) // contactId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RAPhone entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHasRoomApp(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setLabel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRoomappid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContactId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RAPhone entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RAPhone entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "phones" to-many relationship of RAContact. */
    public List<RAPhone> _queryRAContact_Phones(long contactId) {
        synchronized (this) {
            if (rAContact_PhonesQuery == null) {
                QueryBuilder<RAPhone> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ContactId.eq(null));
                rAContact_PhonesQuery = queryBuilder.build();
            }
        }
        Query<RAPhone> query = rAContact_PhonesQuery.forCurrentThread();
        query.setParameter(0, contactId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRAContactDao().getAllColumns());
            builder.append(" FROM RAPHONE T");
            builder.append(" LEFT JOIN RACONTACT T0 ON T.'CONTACT_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RAPhone loadCurrentDeep(Cursor cursor, boolean lock) {
        RAPhone entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RAContact contact = loadCurrentOther(daoSession.getRAContactDao(), cursor, offset);
         if(contact != null) {
            entity.setContact(contact);
        }

        return entity;    
    }

    public RAPhone loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RAPhone> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RAPhone> list = new ArrayList<RAPhone>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RAPhone> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RAPhone> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
