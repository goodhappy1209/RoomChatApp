package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import co.roomapp.room.model.RARoomInvite;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RAROOM_INVITE.
*/
public class RARoomInviteDao extends AbstractDao<RARoomInvite, Long>  implements Serializable {

    public static final String TABLENAME = "RAROOM_INVITE";

    /**
     * Properties of entity RARoomInvite.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CreatedAt = new Property(1, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property Status = new Property(2, Integer.class, "status", false, "STATUS");
        public final static Property UpdatedAt = new Property(3, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property PhoneId = new Property(4, long.class, "phoneId", false, "PHONE_ID");
        public final static Property RoomId = new Property(5, long.class, "roomId", false, "ROOM_ID");
    };

    private DaoSession daoSession;

    private Query<RARoomInvite> rAPhone_InvitesQuery;
    private Query<RARoomInvite> rARoom_InvitesQuery;

    public RARoomInviteDao(DaoConfig config) {
        super(config);
    }
    
    public RARoomInviteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RAROOM_INVITE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CREATED_AT' INTEGER," + // 1: createdAt
                "'STATUS' INTEGER," + // 2: status
                "'UPDATED_AT' INTEGER," + // 3: updatedAt
                "'PHONE_ID' INTEGER NOT NULL ," + // 4: phoneId
                "'ROOM_ID' INTEGER NOT NULL );"); // 5: roomId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RAROOM_INVITE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RARoomInvite entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(2, createdAt.getTime());
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(3, status);
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(4, updatedAt.getTime());
        }
        stmt.bindLong(5, entity.getPhoneId());
        stmt.bindLong(6, entity.getRoomId());
    }

    @Override
    protected void attachEntity(RARoomInvite entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RARoomInvite readEntity(Cursor cursor, int offset) {
        RARoomInvite entity = new RARoomInvite( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // createdAt
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // status
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // updatedAt
            cursor.getLong(offset + 4), // phoneId
            cursor.getLong(offset + 5) // roomId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RARoomInvite entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCreatedAt(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setUpdatedAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setPhoneId(cursor.getLong(offset + 4));
        entity.setRoomId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RARoomInvite entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RARoomInvite entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "invites" to-many relationship of RAPhone. */
    public List<RARoomInvite> _queryRAPhone_Invites(long phoneId) {
        synchronized (this) {
            if (rAPhone_InvitesQuery == null) {
                QueryBuilder<RARoomInvite> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PhoneId.eq(null));
                rAPhone_InvitesQuery = queryBuilder.build();
            }
        }
        Query<RARoomInvite> query = rAPhone_InvitesQuery.forCurrentThread();
        query.setParameter(0, phoneId);
        return query.list();
    }

    /** Internal query to resolve the "invites" to-many relationship of RARoom. */
    public List<RARoomInvite> _queryRARoom_Invites(long roomId) {
        synchronized (this) {
            if (rARoom_InvitesQuery == null) {
                QueryBuilder<RARoomInvite> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoomId.eq(null));
                rARoom_InvitesQuery = queryBuilder.build();
            }
        }
        Query<RARoomInvite> query = rARoom_InvitesQuery.forCurrentThread();
        query.setParameter(0, roomId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRAPhoneDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRARoomDao().getAllColumns());
            builder.append(" FROM RAROOM_INVITE T");
            builder.append(" LEFT JOIN RAPHONE T0 ON T.'PHONE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN RAROOM T1 ON T.'ROOM_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RARoomInvite loadCurrentDeep(Cursor cursor, boolean lock) {
        RARoomInvite entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RAPhone phone = loadCurrentOther(daoSession.getRAPhoneDao(), cursor, offset);
         if(phone != null) {
            entity.setPhone(phone);
        }
        offset += daoSession.getRAPhoneDao().getAllColumns().length;

        RARoom room = loadCurrentOther(daoSession.getRARoomDao(), cursor, offset);
         if(room != null) {
            entity.setRoom(room);
        }

        return entity;    
    }

    public RARoomInvite loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RARoomInvite> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RARoomInvite> list = new ArrayList<RARoomInvite>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RARoomInvite> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RARoomInvite> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
