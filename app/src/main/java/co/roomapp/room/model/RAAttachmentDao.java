package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import co.roomapp.room.model.RAAttachment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RAATTACHMENT.
*/
public class RAAttachmentDao extends AbstractDao<RAAttachment, Long> implements Serializable {

    public static final String TABLENAME = "RAATTACHMENT";

    /**
     * Properties of entity RAAttachment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AlbumName = new Property(1, String.class, "albumName", false, "ALBUM_NAME");
        public final static Property Body = new Property(2, String.class, "body", false, "BODY");
        public final static Property Filesize = new Property(3, Long.class, "filesize", false, "FILESIZE");
        public final static Property Latitude = new Property(4, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(5, Double.class, "longitude", false, "LONGITUDE");
        public final static Property MediaLocalPath = new Property(6, String.class, "mediaLocalPath", false, "MEDIA_LOCAL_PATH");
        public final static Property MediaURL = new Property(7, String.class, "mediaURL", false, "MEDIA_URL");
        public final static Property MovieDuration = new Property(8, Double.class, "movieDuration", false, "MOVIE_DURATION");
        public final static Property ThumbLocalPath = new Property(9, String.class, "thumbLocalPath", false, "THUMB_LOCAL_PATH");
        public final static Property Title = new Property(10, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(11, Integer.class, "type", false, "TYPE");
        public final static Property VcardName = new Property(12, String.class, "vcardName", false, "VCARD_NAME");
        public final static Property VcardString = new Property(13, String.class, "vcardString", false, "VCARD_STRING");
        public final static Property MessageId = new Property(14, long.class, "messageId", false, "MESSAGE_ID");
    };

    private DaoSession daoSession;

    private Query<RAAttachment> rAMessage_AttachmentsQuery;

    public RAAttachmentDao(DaoConfig config) {
        super(config);
    }
    
    public RAAttachmentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RAATTACHMENT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ALBUM_NAME' TEXT," + // 1: albumName
                "'BODY' TEXT," + // 2: body
                "'FILESIZE' INTEGER," + // 3: filesize
                "'LATITUDE' REAL," + // 4: latitude
                "'LONGITUDE' REAL," + // 5: longitude
                "'MEDIA_LOCAL_PATH' TEXT," + // 6: mediaLocalPath
                "'MEDIA_URL' TEXT," + // 7: mediaURL
                "'MOVIE_DURATION' REAL," + // 8: movieDuration
                "'THUMB_LOCAL_PATH' TEXT," + // 9: thumbLocalPath
                "'TITLE' TEXT," + // 10: title
                "'TYPE' INTEGER," + // 11: type
                "'VCARD_NAME' TEXT," + // 12: vcardName
                "'VCARD_STRING' TEXT," + // 13: vcardString
                "'MESSAGE_ID' INTEGER NOT NULL );"); // 14: messageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RAATTACHMENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RAAttachment entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(2, albumName);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(3, body);
        }
 
        Long filesize = entity.getFilesize();
        if (filesize != null) {
            stmt.bindLong(4, filesize);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(5, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(6, longitude);
        }
 
        String mediaLocalPath = entity.getMediaLocalPath();
        if (mediaLocalPath != null) {
            stmt.bindString(7, mediaLocalPath);
        }
 
        String mediaURL = entity.getMediaURL();
        if (mediaURL != null) {
            stmt.bindString(8, mediaURL);
        }
 
        Double movieDuration = entity.getMovieDuration();
        if (movieDuration != null) {
            stmt.bindDouble(9, movieDuration);
        }
 
        String thumbLocalPath = entity.getThumbLocalPath();
        if (thumbLocalPath != null) {
            stmt.bindString(10, thumbLocalPath);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(11, title);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(12, type);
        }
 
        String vcardName = entity.getVcardName();
        if (vcardName != null) {
            stmt.bindString(13, vcardName);
        }
 
        String vcardString = entity.getVcardString();
        if (vcardString != null) {
            stmt.bindString(14, vcardString);
        }
        stmt.bindLong(15, entity.getMessageId());
    }

    @Override
    protected void attachEntity(RAAttachment entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RAAttachment readEntity(Cursor cursor, int offset) {
        RAAttachment entity = new RAAttachment( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // albumName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // body
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // filesize
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // longitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mediaLocalPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mediaURL
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // movieDuration
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // thumbLocalPath
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // title
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // vcardName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // vcardString
            cursor.getLong(offset + 14) // messageId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RAAttachment entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAlbumName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBody(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilesize(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setLongitude(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setMediaLocalPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMediaURL(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMovieDuration(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setThumbLocalPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setVcardName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setVcardString(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMessageId(cursor.getLong(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RAAttachment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RAAttachment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attachments" to-many relationship of RAMessage. */
    public List<RAAttachment> _queryRAMessage_Attachments(long messageId) {
        synchronized (this) {
            if (rAMessage_AttachmentsQuery == null) {
                QueryBuilder<RAAttachment> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.MessageId.eq(null));
                rAMessage_AttachmentsQuery = queryBuilder.build();
            }
        }
        Query<RAAttachment> query = rAMessage_AttachmentsQuery.forCurrentThread();
        query.setParameter(0, messageId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRAMessageDao().getAllColumns());
            builder.append(" FROM RAATTACHMENT T");
            builder.append(" LEFT JOIN RAMESSAGE T0 ON T.'MESSAGE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RAAttachment loadCurrentDeep(Cursor cursor, boolean lock) {
        RAAttachment entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RAMessage message = loadCurrentOther(daoSession.getRAMessageDao(), cursor, offset);
         if(message != null) {
            entity.setMessage(message);
        }

        return entity;    
    }

    public RAAttachment loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RAAttachment> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RAAttachment> list = new ArrayList<RAAttachment>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RAAttachment> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RAAttachment> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
