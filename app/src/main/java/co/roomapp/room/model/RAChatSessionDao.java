package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import co.roomapp.room.model.RAChatSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RACHAT_SESSION.
*/
public class RAChatSessionDao extends AbstractDao<RAChatSession, Long> implements Serializable{

    public static final String TABLENAME = "RACHAT_SESSION";

    /**
     * Properties of entity RAChatSession.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ContactABID = new Property(1, String.class, "contactABID", false, "CONTACT_ABID");
        public final static Property ContactJID = new Property(2, String.class, "contactJID", false, "CONTACT_JID");
        public final static Property IsConnected = new Property(3, Boolean.class, "isConnected", false, "IS_CONNECTED");
        public final static Property IsOnline = new Property(4, Boolean.class, "isOnline", false, "IS_ONLINE");
        public final static Property LastConnected = new Property(5, java.util.Date.class, "lastConnected", false, "LAST_CONNECTED");
        public final static Property LastEntered = new Property(6, java.util.Date.class, "lastEntered", false, "LAST_ENTERED");
        public final static Property LastMessageDate = new Property(7, java.util.Date.class, "lastMessageDate", false, "LAST_MESSAGE_DATE");
        public final static Property LastMessageText = new Property(8, String.class, "lastMessageText", false, "LAST_MESSAGE_TEXT");
        public final static Property PartnerName = new Property(9, String.class, "partnerName", false, "PARTNER_NAME");
        public final static Property Password = new Property(10, String.class, "password", false, "PASSWORD");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
        public final static Property UnreadMessages = new Property(12, Long.class, "unreadMessages", false, "UNREAD_MESSAGES");
        public final static Property RoomId = new Property(13, Long.class, "roomId", false, "ROOM_ID");
    };

    private DaoSession daoSession;

    private Query<RAChatSession> rARoom_ChatsessionsQuery;

    public RAChatSessionDao(DaoConfig config) {
        super(config);
    }
    
    public RAChatSessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RACHAT_SESSION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONTACT_ABID' TEXT," + // 1: contactABID
                "'CONTACT_JID' TEXT," + // 2: contactJID
                "'IS_CONNECTED' INTEGER," + // 3: isConnected
                "'IS_ONLINE' INTEGER," + // 4: isOnline
                "'LAST_CONNECTED' INTEGER," + // 5: lastConnected
                "'LAST_ENTERED' INTEGER," + // 6: lastEntered
                "'LAST_MESSAGE_DATE' INTEGER," + // 7: lastMessageDate
                "'LAST_MESSAGE_TEXT' TEXT," + // 8: lastMessageText
                "'PARTNER_NAME' TEXT," + // 9: partnerName
                "'PASSWORD' TEXT," + // 10: password
                "'STATUS' TEXT," + // 11: status
                "'UNREAD_MESSAGES' INTEGER," + // 12: unreadMessages
                "'ROOM_ID' INTEGER);"); // 13: roomId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RACHAT_SESSION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RAChatSession entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String contactABID = entity.getContactABID();
        if (contactABID != null) {
            stmt.bindString(2, contactABID);
        }
 
        String contactJID = entity.getContactJID();
        if (contactJID != null) {
            stmt.bindString(3, contactJID);
        }
 
        Boolean isConnected = entity.getIsConnected();
        if (isConnected != null) {
            stmt.bindLong(4, isConnected ? 1l: 0l);
        }
 
        Boolean isOnline = entity.getIsOnline();
        if (isOnline != null) {
            stmt.bindLong(5, isOnline ? 1l: 0l);
        }
 
        java.util.Date lastConnected = entity.getLastConnected();
        if (lastConnected != null) {
            stmt.bindLong(6, lastConnected.getTime());
        }
 
        java.util.Date lastEntered = entity.getLastEntered();
        if (lastEntered != null) {
            stmt.bindLong(7, lastEntered.getTime());
        }
 
        java.util.Date lastMessageDate = entity.getLastMessageDate();
        if (lastMessageDate != null) {
            stmt.bindLong(8, lastMessageDate.getTime());
        }
 
        String lastMessageText = entity.getLastMessageText();
        if (lastMessageText != null) {
            stmt.bindString(9, lastMessageText);
        }
 
        String partnerName = entity.getPartnerName();
        if (partnerName != null) {
            stmt.bindString(10, partnerName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(11, password);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
 
        Long unreadMessages = entity.getUnreadMessages();
        if (unreadMessages != null) {
            stmt.bindLong(13, unreadMessages);
        }
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(14, roomId);
        }
    }

    @Override
    protected void attachEntity(RAChatSession entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RAChatSession readEntity(Cursor cursor, int offset) {
        RAChatSession entity = new RAChatSession( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // contactABID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // contactJID
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isConnected
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // isOnline
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // lastConnected
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // lastEntered
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // lastMessageDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lastMessageText
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // partnerName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // password
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // status
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // unreadMessages
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // roomId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RAChatSession entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContactABID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContactJID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsConnected(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setIsOnline(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setLastConnected(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setLastEntered(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLastMessageDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setLastMessageText(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPartnerName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPassword(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUnreadMessages(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setRoomId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RAChatSession entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RAChatSession entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "chatsessions" to-many relationship of RARoom. */
    public List<RAChatSession> _queryRARoom_Chatsessions(Long roomId) {
        synchronized (this) {
            if (rARoom_ChatsessionsQuery == null) {
                QueryBuilder<RAChatSession> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoomId.eq(null));
                rARoom_ChatsessionsQuery = queryBuilder.build();
            }
        }
        Query<RAChatSession> query = rARoom_ChatsessionsQuery.forCurrentThread();
        query.setParameter(0, roomId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRARoomDao().getAllColumns());
            builder.append(" FROM RACHAT_SESSION T");
            builder.append(" LEFT JOIN RAROOM T0 ON T.'ROOM_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RAChatSession loadCurrentDeep(Cursor cursor, boolean lock) {
        RAChatSession entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RARoom room = loadCurrentOther(daoSession.getRARoomDao(), cursor, offset);
        entity.setRoom(room);

        return entity;    
    }

    public RAChatSession loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RAChatSession> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RAChatSession> list = new ArrayList<RAChatSession>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RAChatSession> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RAChatSession> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
