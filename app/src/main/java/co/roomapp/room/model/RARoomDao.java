package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import co.roomapp.room.model.RARoom;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RAROOM.
*/
public class RARoomDao extends AbstractDao<RARoom, Long> implements Serializable{

    public static final String TABLENAME = "RAROOM";

    /**
     * Properties of entity RARoom.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CoverLocalPath = new Property(1, String.class, "coverLocalPath", false, "COVER_LOCAL_PATH");
        public final static Property CoverURL = new Property(2, String.class, "coverURL", false, "COVER_URL");
        public final static Property CreatedAt = new Property(3, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property Hashtags = new Property(4, String.class, "hashtags", false, "HASHTAGS");
        public final static Property INewMessagesCount = new Property(5, Boolean.class, "iNewMessagesCount", false, "I_NEW_MESSAGES_COUNT");
        public final static Property IsAdmin = new Property(6, Boolean.class, "isAdmin", false, "IS_ADMIN");
        public final static Property IsAdult = new Property(7, Boolean.class, "isAdult", false, "IS_ADULT");
        public final static Property IsChatEnable = new Property(8, Boolean.class, "isChatEnable", false, "IS_CHAT_ENABLE");
        public final static Property IsMute = new Property(9, Boolean.class, "isMute", false, "IS_MUTE");
        public final static Property IsPrivate = new Property(10, Boolean.class, "isPrivate", false, "IS_PRIVATE");
        public final static Property IsSearchable = new Property(11, Boolean.class, "isSearchable", false, "IS_SEARCHABLE");
        public final static Property Language = new Property(12, String.class, "language", false, "LANGUAGE");
        public final static Property LastEntered = new Property(13, java.util.Date.class, "lastEntered", false, "LAST_ENTERED");
        public final static Property LastmessageDate = new Property(14, java.util.Date.class, "lastmessageDate", false, "LASTMESSAGE_DATE");
        public final static Property LastMessageFromJID = new Property(15, String.class, "lastMessageFromJID", false, "LAST_MESSAGE_FROM_JID");
        public final static Property LastMessageFromName = new Property(16, String.class, "lastMessageFromName", false, "LAST_MESSAGE_FROM_NAME");
        public final static Property LastMessageText = new Property(17, String.class, "lastMessageText", false, "LAST_MESSAGE_TEXT");
        public final static Property LastSync = new Property(18, java.util.Date.class, "lastSync", false, "LAST_SYNC");
        public final static Property Latitude = new Property(19, Double.class, "latitude", false, "LATITUDE");
        public final static Property LockDate = new Property(20, java.util.Date.class, "lockDate", false, "LOCK_DATE");
        public final static Property Longitude = new Property(21, Double.class, "longitude", false, "LONGITUDE");
        public final static Property MaxGuests = new Property(22, Long.class, "maxGuests", false, "MAX_GUESTS");
        public final static Property MembersCount = new Property(23, Long.class, "membersCount", false, "MEMBERS_COUNT");
        public final static Property Name = new Property(24, String.class, "name", false, "NAME");
        public final static Property Nickname = new Property(25, String.class, "nickname", false, "NICKNAME");
        public final static Property OwnerDisplayName = new Property(26, String.class, "ownerDisplayName", false, "OWNER_DISPLAY_NAME");
        public final static Property OwnerJID = new Property(27, String.class, "ownerJID", false, "OWNER_JID");
        public final static Property Password = new Property(28, String.class, "password", false, "PASSWORD");
        public final static Property Roomappid = new Property(29, String.class, "roomappid", false, "ROOMAPPID");
        public final static Property RoomDescription = new Property(30, String.class, "roomDescription", false, "ROOM_DESCRIPTION");
        public final static Property RoomJID = new Property(31, String.class, "roomJID", false, "ROOM_JID");
        public final static Property Roomkey = new Property(32, String.class, "roomkey", false, "ROOMKEY");
        public final static Property ToDelete = new Property(33, Boolean.class, "toDelete", false, "TO_DELETE");
        public final static Property ToSave = new Property(34, Boolean.class, "toSave", false, "TO_SAVE");
        public final static Property UnreadMessage = new Property(35, Long.class, "unreadMessage", false, "UNREAD_MESSAGE");
        public final static Property UpdatedAt = new Property(36, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property LastMessageId = new Property(37, Long.class, "lastMessageId", false, "LAST_MESSAGE_ID");
    };

    private DaoSession daoSession;


    public RARoomDao(DaoConfig config) {
        super(config);
    }
    
    public RARoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RAROOM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'COVER_LOCAL_PATH' TEXT," + // 1: coverLocalPath
                "'COVER_URL' TEXT," + // 2: coverURL
                "'CREATED_AT' INTEGER," + // 3: createdAt
                "'HASHTAGS' TEXT," + // 4: hashtags
                "'I_NEW_MESSAGES_COUNT' INTEGER," + // 5: iNewMessagesCount
                "'IS_ADMIN' INTEGER," + // 6: isAdmin
                "'IS_ADULT' INTEGER," + // 7: isAdult
                "'IS_CHAT_ENABLE' INTEGER," + // 8: isChatEnable
                "'IS_MUTE' INTEGER," + // 9: isMute
                "'IS_PRIVATE' INTEGER," + // 10: isPrivate
                "'IS_SEARCHABLE' INTEGER," + // 11: isSearchable
                "'LANGUAGE' TEXT," + // 12: language
                "'LAST_ENTERED' INTEGER," + // 13: lastEntered
                "'LASTMESSAGE_DATE' INTEGER," + // 14: lastmessageDate
                "'LAST_MESSAGE_FROM_JID' TEXT," + // 15: lastMessageFromJID
                "'LAST_MESSAGE_FROM_NAME' TEXT," + // 16: lastMessageFromName
                "'LAST_MESSAGE_TEXT' TEXT," + // 17: lastMessageText
                "'LAST_SYNC' INTEGER," + // 18: lastSync
                "'LATITUDE' REAL," + // 19: latitude
                "'LOCK_DATE' INTEGER," + // 20: lockDate
                "'LONGITUDE' REAL," + // 21: longitude
                "'MAX_GUESTS' INTEGER," + // 22: maxGuests
                "'MEMBERS_COUNT' INTEGER," + // 23: membersCount
                "'NAME' TEXT," + // 24: name
                "'NICKNAME' TEXT," + // 25: nickname
                "'OWNER_DISPLAY_NAME' TEXT," + // 26: ownerDisplayName
                "'OWNER_JID' TEXT," + // 27: ownerJID
                "'PASSWORD' TEXT," + // 28: password
                "'ROOMAPPID' TEXT," + // 29: roomappid
                "'ROOM_DESCRIPTION' TEXT," + // 30: roomDescription
                "'ROOM_JID' TEXT," + // 31: roomJID
                "'ROOMKEY' TEXT," + // 32: roomkey
                "'TO_DELETE' INTEGER," + // 33: toDelete
                "'TO_SAVE' INTEGER," + // 34: toSave
                "'UNREAD_MESSAGE' INTEGER," + // 35: unreadMessage
                "'UPDATED_AT' INTEGER," + // 36: updatedAt
                "'LAST_MESSAGE_ID' INTEGER);"); // 37: lastMessageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RAROOM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RARoom entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String coverLocalPath = entity.getCoverLocalPath();
        if (coverLocalPath != null) {
            stmt.bindString(2, coverLocalPath);
        }
 
        String coverURL = entity.getCoverURL();
        if (coverURL != null) {
            stmt.bindString(3, coverURL);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(4, createdAt.getTime());
        }
 
        String hashtags = entity.getHashtags();
        if (hashtags != null) {
            stmt.bindString(5, hashtags);
        }
 
        Boolean iNewMessagesCount = entity.getINewMessagesCount();
        if (iNewMessagesCount != null) {
            stmt.bindLong(6, iNewMessagesCount ? 1l: 0l);
        }
 
        Boolean isAdmin = entity.getIsAdmin();
        if (isAdmin != null) {
            stmt.bindLong(7, isAdmin ? 1l: 0l);
        }
 
        Boolean isAdult = entity.getIsAdult();
        if (isAdult != null) {
            stmt.bindLong(8, isAdult ? 1l: 0l);
        }
 
        Boolean isChatEnable = entity.getIsChatEnable();
        if (isChatEnable != null) {
            stmt.bindLong(9, isChatEnable ? 1l: 0l);
        }
 
        Boolean isMute = entity.getIsMute();
        if (isMute != null) {
            stmt.bindLong(10, isMute ? 1l: 0l);
        }
 
        Boolean isPrivate = entity.getIsPrivate();
        if (isPrivate != null) {
            stmt.bindLong(11, isPrivate ? 1l: 0l);
        }
 
        Boolean isSearchable = entity.getIsSearchable();
        if (isSearchable != null) {
            stmt.bindLong(12, isSearchable ? 1l: 0l);
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(13, language);
        }
 
        java.util.Date lastEntered = entity.getLastEntered();
        if (lastEntered != null) {
            stmt.bindLong(14, lastEntered.getTime());
        }
 
        java.util.Date lastmessageDate = entity.getLastmessageDate();
        if (lastmessageDate != null) {
            stmt.bindLong(15, lastmessageDate.getTime());
        }
 
        String lastMessageFromJID = entity.getLastMessageFromJID();
        if (lastMessageFromJID != null) {
            stmt.bindString(16, lastMessageFromJID);
        }
 
        String lastMessageFromName = entity.getLastMessageFromName();
        if (lastMessageFromName != null) {
            stmt.bindString(17, lastMessageFromName);
        }
 
        String lastMessageText = entity.getLastMessageText();
        if (lastMessageText != null) {
            stmt.bindString(18, lastMessageText);
        }
 
        java.util.Date lastSync = entity.getLastSync();
        if (lastSync != null) {
            stmt.bindLong(19, lastSync.getTime());
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(20, latitude);
        }
 
        java.util.Date lockDate = entity.getLockDate();
        if (lockDate != null) {
            stmt.bindLong(21, lockDate.getTime());
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(22, longitude);
        }
 
        Long maxGuests = entity.getMaxGuests();
        if (maxGuests != null) {
            stmt.bindLong(23, maxGuests);
        }
 
        Long membersCount = entity.getMembersCount();
        if (membersCount != null) {
            stmt.bindLong(24, membersCount);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(25, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(26, nickname);
        }
 
        String ownerDisplayName = entity.getOwnerDisplayName();
        if (ownerDisplayName != null) {
            stmt.bindString(27, ownerDisplayName);
        }
 
        String ownerJID = entity.getOwnerJID();
        if (ownerJID != null) {
            stmt.bindString(28, ownerJID);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(29, password);
        }
 
        String roomappid = entity.getRoomappid();
        if (roomappid != null) {
            stmt.bindString(30, roomappid);
        }
 
        String roomDescription = entity.getRoomDescription();
        if (roomDescription != null) {
            stmt.bindString(31, roomDescription);
        }
 
        String roomJID = entity.getRoomJID();
        if (roomJID != null) {
            stmt.bindString(32, roomJID);
        }
 
        String roomkey = entity.getRoomkey();
        if (roomkey != null) {
            stmt.bindString(33, roomkey);
        }
 
        Boolean toDelete = entity.getToDelete();
        if (toDelete != null) {
            stmt.bindLong(34, toDelete ? 1l: 0l);
        }
 
        Boolean toSave = entity.getToSave();
        if (toSave != null) {
            stmt.bindLong(35, toSave ? 1l: 0l);
        }
 
        Long unreadMessage = entity.getUnreadMessage();
        if (unreadMessage != null) {
            stmt.bindLong(36, unreadMessage);
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(37, updatedAt.getTime());
        }
 
        Long lastMessageId = entity.getLastMessageId();
        if (lastMessageId != null) {
            stmt.bindLong(38, lastMessageId);
        }
    }

    @Override
    protected void attachEntity(RARoom entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RARoom readEntity(Cursor cursor, int offset) {
        RARoom entity = new RARoom( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // coverLocalPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coverURL
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // createdAt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // hashtags
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // iNewMessagesCount
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isAdmin
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isAdult
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isChatEnable
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isMute
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isPrivate
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isSearchable
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // language
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // lastEntered
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // lastmessageDate
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // lastMessageFromJID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // lastMessageFromName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // lastMessageText
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // lastSync
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // latitude
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // lockDate
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // longitude
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // maxGuests
            cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // membersCount
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // name
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // nickname
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // ownerDisplayName
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // ownerJID
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // password
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // roomappid
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // roomDescription
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // roomJID
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // roomkey
            cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0, // toDelete
            cursor.isNull(offset + 34) ? null : cursor.getShort(offset + 34) != 0, // toSave
            cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35), // unreadMessage
            cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)), // updatedAt
            cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37) // lastMessageId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RARoom entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCoverLocalPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoverURL(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreatedAt(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setHashtags(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setINewMessagesCount(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setIsAdmin(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsAdult(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsChatEnable(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsMute(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsPrivate(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsSearchable(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setLanguage(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLastEntered(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setLastmessageDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setLastMessageFromJID(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLastMessageFromName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLastMessageText(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLastSync(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setLatitude(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setLockDate(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setLongitude(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setMaxGuests(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setMembersCount(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setNickname(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setOwnerDisplayName(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setOwnerJID(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setPassword(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRoomappid(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setRoomDescription(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setRoomJID(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setRoomkey(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setToDelete(cursor.isNull(offset + 33) ? null : cursor.getShort(offset + 33) != 0);
        entity.setToSave(cursor.isNull(offset + 34) ? null : cursor.getShort(offset + 34) != 0);
        entity.setUnreadMessage(cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35));
        entity.setUpdatedAt(cursor.isNull(offset + 36) ? null : new java.util.Date(cursor.getLong(offset + 36)));
        entity.setLastMessageId(cursor.isNull(offset + 37) ? null : cursor.getLong(offset + 37));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RARoom entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RARoom entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRAMessageDao().getAllColumns());
            builder.append(" FROM RAROOM T");
            builder.append(" LEFT JOIN RAMESSAGE T0 ON T.'LAST_MESSAGE_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RARoom loadCurrentDeep(Cursor cursor, boolean lock) {
        RARoom entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RAMessage lastMessage = loadCurrentOther(daoSession.getRAMessageDao(), cursor, offset);
        entity.setLastMessage(lastMessage);

        return entity;    
    }

    public RARoom loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RARoom> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RARoom> list = new ArrayList<RARoom>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RARoom> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RARoom> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
