package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import co.roomapp.room.model.RAContact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RACONTACT.
*/
public class RAContactDao extends AbstractDao<RAContact, Long> implements Serializable {

    public static final String TABLENAME = "RACONTACT";

    /**
     * Properties of entity RAContact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Abuserid = new Property(1, String.class, "abuserid", false, "ABUSERID");
        public final static Property Firstname = new Property(2, String.class, "firstname", false, "FIRSTNAME");
        public final static Property Fullname = new Property(3, String.class, "fullname", false, "FULLNAME");
        public final static Property Indexname = new Property(4, String.class, "indexname", false, "INDEXNAME");
        public final static Property SectionId = new Property(5, long.class, "sectionId", false, "SECTION_ID");
    };

    private DaoSession daoSession;

    private Query<RAContact> rAContactSection_ContactsQuery;

    public RAContactDao(DaoConfig config) {
        super(config);
    }
    
    public RAContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RACONTACT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ABUSERID' TEXT," + // 1: abuserid
                "'FIRSTNAME' TEXT," + // 2: firstname
                "'FULLNAME' TEXT," + // 3: fullname
                "'INDEXNAME' TEXT," + // 4: indexname
                "'SECTION_ID' INTEGER NOT NULL );"); // 5: sectionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RACONTACT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RAContact entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String abuserid = entity.getAbuserid();
        if (abuserid != null) {
            stmt.bindString(2, abuserid);
        }
 
        String firstname = entity.getFirstname();
        if (firstname != null) {
            stmt.bindString(3, firstname);
        }
 
        String fullname = entity.getFullname();
        if (fullname != null) {
            stmt.bindString(4, fullname);
        }
 
        String indexname = entity.getIndexname();
        if (indexname != null) {
            stmt.bindString(5, indexname);
        }
        stmt.bindLong(6, entity.getSectionId());
    }

    @Override
    protected void attachEntity(RAContact entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RAContact readEntity(Cursor cursor, int offset) {
        RAContact entity = new RAContact( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // abuserid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // firstname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fullname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // indexname
            cursor.getLong(offset + 5) // sectionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RAContact entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAbuserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFirstname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFullname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndexname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSectionId(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RAContact entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RAContact entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "contacts" to-many relationship of RAContactSection. */
    public List<RAContact> _queryRAContactSection_Contacts(long sectionId) {
        synchronized (this) {
            if (rAContactSection_ContactsQuery == null) {
                QueryBuilder<RAContact> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SectionId.eq(null));
                queryBuilder.orderRaw("FULLNAME ASC");
                rAContactSection_ContactsQuery = queryBuilder.build();
            }
        }
        Query<RAContact> query = rAContactSection_ContactsQuery.forCurrentThread();
        query.setParameter(0, sectionId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRAContactSectionDao().getAllColumns());
            builder.append(" FROM RACONTACT T");
            builder.append(" LEFT JOIN RACONTACT_SECTION T0 ON T.'SECTION_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RAContact loadCurrentDeep(Cursor cursor, boolean lock) {
        RAContact entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RAContactSection section = loadCurrentOther(daoSession.getRAContactSectionDao(), cursor, offset);
         if(section != null) {
            entity.setSection(section);
        }

        return entity;    
    }

    public RAContact loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RAContact> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RAContact> list = new ArrayList<RAContact>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RAContact> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RAContact> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
