package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import co.roomapp.room.model.RAMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RAMESSAGE.
*/
public class RAMessageDao extends AbstractDao<RAMessage, Long> implements Serializable {

    public static final String TABLENAME = "RAMESSAGE";

    /**
     * Properties of entity RAMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Body = new Property(1, String.class, "body", false, "BODY");
        public final static Property BubbleType = new Property(2, Integer.class, "bubbleType", false, "BUBBLE_TYPE");
        public final static Property CellHeight = new Property(3, Double.class, "cellHeight", false, "CELL_HEIGHT");
        public final static Property CommentsCount = new Property(4, Boolean.class, "commentsCount", false, "COMMENTS_COUNT");
        public final static Property FromJID = new Property(5, String.class, "fromJID", false, "FROM_JID");
        public final static Property FromMe = new Property(6, Boolean.class, "fromMe", false, "FROM_ME");
        public final static Property IsDelivered = new Property(7, Boolean.class, "isDelivered", false, "IS_DELIVERED");
        public final static Property IsLike = new Property(8, Boolean.class, "isLike", false, "IS_LIKE");
        public final static Property IsMoreSelected = new Property(9, Boolean.class, "isMoreSelected", false, "IS_MORE_SELECTED");
        public final static Property IsMute = new Property(10, Boolean.class, "isMute", false, "IS_MUTE");
        public final static Property IsPinned = new Property(11, Boolean.class, "isPinned", false, "IS_PINNED");
        public final static Property IsRead = new Property(12, Boolean.class, "isRead", false, "IS_READ");
        public final static Property LastCommentSync = new Property(13, java.util.Date.class, "lastCommentSync", false, "LAST_COMMENT_SYNC");
        public final static Property LastEntered = new Property(14, java.util.Date.class, "lastEntered", false, "LAST_ENTERED");
        public final static Property LastMessageBody = new Property(15, String.class, "lastMessageBody", false, "LAST_MESSAGE_BODY");
        public final static Property LastMessageDate = new Property(16, java.util.Date.class, "lastMessageDate", false, "LAST_MESSAGE_DATE");
        public final static Property LastMessageFromJID = new Property(17, String.class, "lastMessageFromJID", false, "LAST_MESSAGE_FROM_JID");
        public final static Property LastMessageFromName = new Property(18, String.class, "lastMessageFromName", false, "LAST_MESSAGE_FROM_NAME");
        public final static Property LastMessageID = new Property(19, String.class, "lastMessageID", false, "LAST_MESSAGE_ID");
        public final static Property LastSync = new Property(20, java.util.Date.class, "lastSync", false, "LAST_SYNC");
        public final static Property LikeRating = new Property(21, Double.class, "likeRating", false, "LIKE_RATING");
        public final static Property LikesCount = new Property(22, Long.class, "likesCount", false, "LIKES_COUNT");
        public final static Property Messagedate = new Property(23, java.util.Date.class, "messagedate", false, "MESSAGEDATE");
        public final static Property Password = new Property(24, String.class, "password", false, "PASSWORD");
        public final static Property Pushname = new Property(25, String.class, "pushname", false, "PUSHNAME");
        public final static Property Roomappid = new Property(26, String.class, "roomappid", false, "ROOMAPPID");
        public final static Property RoomJID = new Property(27, String.class, "roomJID", false, "ROOM_JID");
        public final static Property Subject = new Property(28, String.class, "subject", false, "SUBJECT");
        public final static Property ToJID = new Property(29, String.class, "toJID", false, "TO_JID");
        public final static Property Type = new Property(30, Integer.class, "type", false, "TYPE");
        public final static Property UpdatedAt = new Property(31, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property ChatSessionId = new Property(32, Long.class, "chatSessionId", false, "CHAT_SESSION_ID");
        public final static Property RoomId = new Property(33, Long.class, "roomId", false, "ROOM_ID");
        public final static Property ParentMessageId = new Property(34, Long.class, "parentMessageId", false, "PARENT_MESSAGE_ID");
        public final static Property NotificationId = new Property(35, Long.class, "notificationId", false, "NOTIFICATION_ID");
        public final static Property LastCommentId = new Property(36, Long.class, "lastCommentId", false, "LAST_COMMENT_ID");
    };

    private DaoSession daoSession;

    private Query<RAMessage> rAChatSession_MessagesQuery;
    private Query<RAMessage> rARoom_MessagesQuery;
    private Query<RAMessage> rAMessage_CommentsQuery;

    public RAMessageDao(DaoConfig config) {
        super(config);
    }
    
    public RAMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RAMESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BODY' TEXT," + // 1: body
                "'BUBBLE_TYPE' INTEGER," + // 2: bubbleType
                "'CELL_HEIGHT' REAL," + // 3: cellHeight
                "'COMMENTS_COUNT' INTEGER," + // 4: commentsCount
                "'FROM_JID' TEXT," + // 5: fromJID
                "'FROM_ME' INTEGER," + // 6: fromMe
                "'IS_DELIVERED' INTEGER," + // 7: isDelivered
                "'IS_LIKE' INTEGER," + // 8: isLike
                "'IS_MORE_SELECTED' INTEGER," + // 9: isMoreSelected
                "'IS_MUTE' INTEGER," + // 10: isMute
                "'IS_PINNED' INTEGER," + // 11: isPinned
                "'IS_READ' INTEGER," + // 12: isRead
                "'LAST_COMMENT_SYNC' INTEGER," + // 13: lastCommentSync
                "'LAST_ENTERED' INTEGER," + // 14: lastEntered
                "'LAST_MESSAGE_BODY' TEXT," + // 15: lastMessageBody
                "'LAST_MESSAGE_DATE' INTEGER," + // 16: lastMessageDate
                "'LAST_MESSAGE_FROM_JID' TEXT," + // 17: lastMessageFromJID
                "'LAST_MESSAGE_FROM_NAME' TEXT," + // 18: lastMessageFromName
                "'LAST_MESSAGE_ID' TEXT," + // 19: lastMessageID
                "'LAST_SYNC' INTEGER," + // 20: lastSync
                "'LIKE_RATING' REAL," + // 21: likeRating
                "'LIKES_COUNT' INTEGER," + // 22: likesCount
                "'MESSAGEDATE' INTEGER," + // 23: messagedate
                "'PASSWORD' TEXT," + // 24: password
                "'PUSHNAME' TEXT," + // 25: pushname
                "'ROOMAPPID' TEXT," + // 26: roomappid
                "'ROOM_JID' TEXT," + // 27: roomJID
                "'SUBJECT' TEXT," + // 28: subject
                "'TO_JID' TEXT," + // 29: toJID
                "'TYPE' INTEGER," + // 30: type
                "'UPDATED_AT' INTEGER," + // 31: updatedAt
                "'CHAT_SESSION_ID' INTEGER," + // 32: chatSessionId
                "'ROOM_ID' INTEGER," + // 33: roomId
                "'PARENT_MESSAGE_ID' INTEGER," + // 34: parentMessageId
                "'NOTIFICATION_ID' INTEGER," + // 35: notificationId
                "'LAST_COMMENT_ID' INTEGER);"); // 36: lastCommentId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RAMESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RAMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(2, body);
        }
 
        Integer bubbleType = entity.getBubbleType();
        if (bubbleType != null) {
            stmt.bindLong(3, bubbleType);
        }
 
        Double cellHeight = entity.getCellHeight();
        if (cellHeight != null) {
            stmt.bindDouble(4, cellHeight);
        }
 
        Boolean commentsCount = entity.getCommentsCount();
        if (commentsCount != null) {
            stmt.bindLong(5, commentsCount ? 1l: 0l);
        }
 
        String fromJID = entity.getFromJID();
        if (fromJID != null) {
            stmt.bindString(6, fromJID);
        }
 
        Boolean fromMe = entity.getFromMe();
        if (fromMe != null) {
            stmt.bindLong(7, fromMe ? 1l: 0l);
        }
 
        Boolean isDelivered = entity.getIsDelivered();
        if (isDelivered != null) {
            stmt.bindLong(8, isDelivered ? 1l: 0l);
        }
 
        Boolean isLike = entity.getIsLike();
        if (isLike != null) {
            stmt.bindLong(9, isLike ? 1l: 0l);
        }
 
        Boolean isMoreSelected = entity.getIsMoreSelected();
        if (isMoreSelected != null) {
            stmt.bindLong(10, isMoreSelected ? 1l: 0l);
        }
 
        Boolean isMute = entity.getIsMute();
        if (isMute != null) {
            stmt.bindLong(11, isMute ? 1l: 0l);
        }
 
        Boolean isPinned = entity.getIsPinned();
        if (isPinned != null) {
            stmt.bindLong(12, isPinned ? 1l: 0l);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(13, isRead ? 1l: 0l);
        }
 
        java.util.Date lastCommentSync = entity.getLastCommentSync();
        if (lastCommentSync != null) {
            stmt.bindLong(14, lastCommentSync.getTime());
        }
 
        java.util.Date lastEntered = entity.getLastEntered();
        if (lastEntered != null) {
            stmt.bindLong(15, lastEntered.getTime());
        }
 
        String lastMessageBody = entity.getLastMessageBody();
        if (lastMessageBody != null) {
            stmt.bindString(16, lastMessageBody);
        }
 
        java.util.Date lastMessageDate = entity.getLastMessageDate();
        if (lastMessageDate != null) {
            stmt.bindLong(17, lastMessageDate.getTime());
        }
 
        String lastMessageFromJID = entity.getLastMessageFromJID();
        if (lastMessageFromJID != null) {
            stmt.bindString(18, lastMessageFromJID);
        }
 
        String lastMessageFromName = entity.getLastMessageFromName();
        if (lastMessageFromName != null) {
            stmt.bindString(19, lastMessageFromName);
        }
 
        String lastMessageID = entity.getLastMessageID();
        if (lastMessageID != null) {
            stmt.bindString(20, lastMessageID);
        }
 
        java.util.Date lastSync = entity.getLastSync();
        if (lastSync != null) {
            stmt.bindLong(21, lastSync.getTime());
        }
 
        Double likeRating = entity.getLikeRating();
        if (likeRating != null) {
            stmt.bindDouble(22, likeRating);
        }
 
        Long likesCount = entity.getLikesCount();
        if (likesCount != null) {
            stmt.bindLong(23, likesCount);
        }
 
        java.util.Date messagedate = entity.getMessagedate();
        if (messagedate != null) {
            stmt.bindLong(24, messagedate.getTime());
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(25, password);
        }
 
        String pushname = entity.getPushname();
        if (pushname != null) {
            stmt.bindString(26, pushname);
        }
 
        String roomappid = entity.getRoomappid();
        if (roomappid != null) {
            stmt.bindString(27, roomappid);
        }
 
        String roomJID = entity.getRoomJID();
        if (roomJID != null) {
            stmt.bindString(28, roomJID);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(29, subject);
        }
 
        String toJID = entity.getToJID();
        if (toJID != null) {
            stmt.bindString(30, toJID);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(31, type);
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(32, updatedAt.getTime());
        }
 
        Long chatSessionId = entity.getChatSessionId();
        if (chatSessionId != null) {
            stmt.bindLong(33, chatSessionId);
        }
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(34, roomId);
        }
 
        Long parentMessageId = entity.getParentMessageId();
        if (parentMessageId != null) {
            stmt.bindLong(35, parentMessageId);
        }
 
        Long notificationId = entity.getNotificationId();
        if (notificationId != null) {
            stmt.bindLong(36, notificationId);
        }
 
        Long lastCommentId = entity.getLastCommentId();
        if (lastCommentId != null) {
            stmt.bindLong(37, lastCommentId);
        }
    }

    @Override
    protected void attachEntity(RAMessage entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RAMessage readEntity(Cursor cursor, int offset) {
        RAMessage entity = new RAMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // body
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // bubbleType
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // cellHeight
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // commentsCount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fromJID
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // fromMe
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isDelivered
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isLike
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isMoreSelected
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isMute
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isPinned
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isRead
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // lastCommentSync
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // lastEntered
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // lastMessageBody
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // lastMessageDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // lastMessageFromJID
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // lastMessageFromName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // lastMessageID
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // lastSync
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // likeRating
            cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // likesCount
            cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)), // messagedate
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // password
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // pushname
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // roomappid
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // roomJID
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // subject
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // toJID
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // type
            cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)), // updatedAt
            cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32), // chatSessionId
            cursor.isNull(offset + 33) ? null : cursor.getLong(offset + 33), // roomId
            cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34), // parentMessageId
            cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35), // notificationId
            cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36) // lastCommentId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RAMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBody(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBubbleType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCellHeight(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCommentsCount(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setFromJID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFromMe(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsDelivered(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsLike(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsMoreSelected(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsMute(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsPinned(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setIsRead(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setLastCommentSync(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setLastEntered(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setLastMessageBody(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLastMessageDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setLastMessageFromJID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setLastMessageFromName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setLastMessageID(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLastSync(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setLikeRating(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setLikesCount(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setMessagedate(cursor.isNull(offset + 23) ? null : new java.util.Date(cursor.getLong(offset + 23)));
        entity.setPassword(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setPushname(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setRoomappid(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRoomJID(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setSubject(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setToJID(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setType(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setUpdatedAt(cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)));
        entity.setChatSessionId(cursor.isNull(offset + 32) ? null : cursor.getLong(offset + 32));
        entity.setRoomId(cursor.isNull(offset + 33) ? null : cursor.getLong(offset + 33));
        entity.setParentMessageId(cursor.isNull(offset + 34) ? null : cursor.getLong(offset + 34));
        entity.setNotificationId(cursor.isNull(offset + 35) ? null : cursor.getLong(offset + 35));
        entity.setLastCommentId(cursor.isNull(offset + 36) ? null : cursor.getLong(offset + 36));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RAMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RAMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "messages" to-many relationship of RAChatSession. */
    public List<RAMessage> _queryRAChatSession_Messages(Long chatSessionId) {
        synchronized (this) {
            if (rAChatSession_MessagesQuery == null) {
                QueryBuilder<RAMessage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ChatSessionId.eq(null));
                rAChatSession_MessagesQuery = queryBuilder.build();
            }
        }
        Query<RAMessage> query = rAChatSession_MessagesQuery.forCurrentThread();
        query.setParameter(0, chatSessionId);
        return query.list();
    }

    /** Internal query to resolve the "messages" to-many relationship of RARoom. */
    public List<RAMessage> _queryRARoom_Messages(Long roomId) {
        synchronized (this) {
            if (rARoom_MessagesQuery == null) {
                QueryBuilder<RAMessage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoomId.eq(null));
                rARoom_MessagesQuery = queryBuilder.build();
            }
        }
        Query<RAMessage> query = rARoom_MessagesQuery.forCurrentThread();
        query.setParameter(0, roomId);
        return query.list();
    }

    /** Internal query to resolve the "comments" to-many relationship of RAMessage. */
    public List<RAMessage> _queryRAMessage_Comments(Long parentMessageId) {
        synchronized (this) {
            if (rAMessage_CommentsQuery == null) {
                QueryBuilder<RAMessage> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentMessageId.eq(null));
                rAMessage_CommentsQuery = queryBuilder.build();
            }
        }
        Query<RAMessage> query = rAMessage_CommentsQuery.forCurrentThread();
        query.setParameter(0, parentMessageId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRAChatSessionDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRARoomDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getRAMessageDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getRANotificationDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T4", daoSession.getRAMessageDao().getAllColumns());
            builder.append(" FROM RAMESSAGE T");
            builder.append(" LEFT JOIN RACHAT_SESSION T0 ON T.'CHAT_SESSION_ID'=T0.'_id'");
            builder.append(" LEFT JOIN RAROOM T1 ON T.'ROOM_ID'=T1.'_id'");
            builder.append(" LEFT JOIN RAMESSAGE T2 ON T.'PARENT_MESSAGE_ID'=T2.'_id'");
            builder.append(" LEFT JOIN RANOTIFICATION T3 ON T.'NOTIFICATION_ID'=T3.'_id'");
            builder.append(" LEFT JOIN RAMESSAGE T4 ON T.'LAST_COMMENT_ID'=T4.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RAMessage loadCurrentDeep(Cursor cursor, boolean lock) {
        RAMessage entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RAChatSession chatSession = loadCurrentOther(daoSession.getRAChatSessionDao(), cursor, offset);
        entity.setChatSession(chatSession);
        offset += daoSession.getRAChatSessionDao().getAllColumns().length;

        RARoom room = loadCurrentOther(daoSession.getRARoomDao(), cursor, offset);
        entity.setRoom(room);
        offset += daoSession.getRARoomDao().getAllColumns().length;

        RAMessage parentMessage = loadCurrentOther(daoSession.getRAMessageDao(), cursor, offset);
        entity.setParentMessage(parentMessage);
        offset += daoSession.getRAMessageDao().getAllColumns().length;

        RANotification notification = loadCurrentOther(daoSession.getRANotificationDao(), cursor, offset);
        entity.setNotification(notification);
        offset += daoSession.getRANotificationDao().getAllColumns().length;

        RAMessage lastComment = loadCurrentOther(daoSession.getRAMessageDao(), cursor, offset);
        entity.setLastComment(lastComment);

        return entity;    
    }

    public RAMessage loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RAMessage> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RAMessage> list = new ArrayList<RAMessage>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RAMessage> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RAMessage> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
