package co.roomapp.room.model;

import java.io.Serializable;

import co.roomapp.room.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table RAROOM_INVITE.
 */
public class RARoomInvite  implements Serializable {

    private Long id;
    private java.util.Date createdAt;
    private Integer status;
    private java.util.Date updatedAt;
    private long phoneId;
    private long roomId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RARoomInviteDao myDao;

    private RAPhone phone;
    private Long phone__resolvedKey;

    private RARoom room;
    private Long room__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RARoomInvite() {
    }

    public RARoomInvite(Long id) {
        this.id = id;
    }

    public RARoomInvite(Long id, java.util.Date createdAt, Integer status, java.util.Date updatedAt, long phoneId, long roomId) {
        this.id = id;
        this.createdAt = createdAt;
        this.status = status;
        this.updatedAt = updatedAt;
        this.phoneId = phoneId;
        this.roomId = roomId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRARoomInviteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public long getPhoneId() {
        return phoneId;
    }

    public void setPhoneId(long phoneId) {
        this.phoneId = phoneId;
    }

    public long getRoomId() {
        return roomId;
    }

    public void setRoomId(long roomId) {
        this.roomId = roomId;
    }

    /** To-one relationship, resolved on first access. */
    public RAPhone getPhone() {
        long __key = this.phoneId;
        if (phone__resolvedKey == null || !phone__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RAPhoneDao targetDao = daoSession.getRAPhoneDao();
            RAPhone phoneNew = targetDao.load(__key);
            synchronized (this) {
                phone = phoneNew;
            	phone__resolvedKey = __key;
            }
        }
        return phone;
    }

    public void setPhone(RAPhone phone) {
        if (phone == null) {
            throw new DaoException("To-one property 'phoneId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.phone = phone;
            phoneId = phone.getId();
            phone__resolvedKey = phoneId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public RARoom getRoom() {
        long __key = this.roomId;
        if (room__resolvedKey == null || !room__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RARoomDao targetDao = daoSession.getRARoomDao();
            RARoom roomNew = targetDao.load(__key);
            synchronized (this) {
                room = roomNew;
            	room__resolvedKey = __key;
            }
        }
        return room;
    }

    public void setRoom(RARoom room) {
        if (room == null) {
            throw new DaoException("To-one property 'roomId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.room = room;
            roomId = room.getId();
            room__resolvedKey = roomId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
