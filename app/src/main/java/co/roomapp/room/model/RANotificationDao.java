package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import co.roomapp.room.model.RANotification;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RANOTIFICATION.
*/
public class RANotificationDao extends AbstractDao<RANotification, Long> implements Serializable {

    public static final String TABLENAME = "RANOTIFICATION";

    /**
     * Properties of entity RANotification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Body = new Property(1, String.class, "body", false, "BODY");
        public final static Property FromJID = new Property(2, String.class, "fromJID", false, "FROM_JID");
        public final static Property IsRead = new Property(3, Boolean.class, "isRead", false, "IS_READ");
        public final static Property MessageRoomappID = new Property(4, String.class, "messageRoomappID", false, "MESSAGE_ROOMAPP_ID");
        public final static Property NotificationDate = new Property(5, java.util.Date.class, "notificationDate", false, "NOTIFICATION_DATE");
        public final static Property ParentID = new Property(6, String.class, "parentID", false, "PARENT_ID");
        public final static Property Type = new Property(7, Integer.class, "type", false, "TYPE");
        public final static Property MessageId = new Property(8, Long.class, "messageId", false, "MESSAGE_ID");
        public final static Property RoomId = new Property(9, Long.class, "roomId", false, "ROOM_ID");
    };

    private DaoSession daoSession;

    private Query<RANotification> rARoom_NotificationsQuery;

    public RANotificationDao(DaoConfig config) {
        super(config);
    }
    
    public RANotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RANOTIFICATION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BODY' TEXT," + // 1: body
                "'FROM_JID' TEXT," + // 2: fromJID
                "'IS_READ' INTEGER," + // 3: isRead
                "'MESSAGE_ROOMAPP_ID' TEXT," + // 4: messageRoomappID
                "'NOTIFICATION_DATE' INTEGER," + // 5: notificationDate
                "'PARENT_ID' TEXT," + // 6: parentID
                "'TYPE' INTEGER," + // 7: type
                "'MESSAGE_ID' INTEGER," + // 8: messageId
                "'ROOM_ID' INTEGER);"); // 9: roomId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RANOTIFICATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RANotification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String body = entity.getBody();
        if (body != null) {
            stmt.bindString(2, body);
        }
 
        String fromJID = entity.getFromJID();
        if (fromJID != null) {
            stmt.bindString(3, fromJID);
        }
 
        Boolean isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(4, isRead ? 1l: 0l);
        }
 
        String messageRoomappID = entity.getMessageRoomappID();
        if (messageRoomappID != null) {
            stmt.bindString(5, messageRoomappID);
        }
 
        java.util.Date notificationDate = entity.getNotificationDate();
        if (notificationDate != null) {
            stmt.bindLong(6, notificationDate.getTime());
        }
 
        String parentID = entity.getParentID();
        if (parentID != null) {
            stmt.bindString(7, parentID);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(8, type);
        }
 
        Long messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindLong(9, messageId);
        }
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(10, roomId);
        }
    }

    @Override
    protected void attachEntity(RANotification entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RANotification readEntity(Cursor cursor, int offset) {
        RANotification entity = new RANotification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // body
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fromJID
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isRead
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // messageRoomappID
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // notificationDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // parentID
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // messageId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // roomId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RANotification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBody(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFromJID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsRead(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setMessageRoomappID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNotificationDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setParentID(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMessageId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setRoomId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RANotification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RANotification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "notifications" to-many relationship of RARoom. */
    public List<RANotification> _queryRARoom_Notifications(Long roomId) {
        synchronized (this) {
            if (rARoom_NotificationsQuery == null) {
                QueryBuilder<RANotification> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RoomId.eq(null));
                rARoom_NotificationsQuery = queryBuilder.build();
            }
        }
        Query<RANotification> query = rARoom_NotificationsQuery.forCurrentThread();
        query.setParameter(0, roomId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRAMessageDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRARoomDao().getAllColumns());
            builder.append(" FROM RANOTIFICATION T");
            builder.append(" LEFT JOIN RAMESSAGE T0 ON T.'MESSAGE_ID'=T0.'_id'");
            builder.append(" LEFT JOIN RAROOM T1 ON T.'ROOM_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RANotification loadCurrentDeep(Cursor cursor, boolean lock) {
        RANotification entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        RAMessage message = loadCurrentOther(daoSession.getRAMessageDao(), cursor, offset);
        entity.setMessage(message);
        offset += daoSession.getRAMessageDao().getAllColumns().length;

        RARoom room = loadCurrentOther(daoSession.getRARoomDao(), cursor, offset);
        entity.setRoom(room);

        return entity;    
    }

    public RANotification loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RANotification> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RANotification> list = new ArrayList<RANotification>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RANotification> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RANotification> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
