package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import co.roomapp.room.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table RACHAT_SESSION.
 */
public class RAChatSession implements Serializable{

    private Long id;
    private String contactABID;
    private String contactJID;
    private Boolean isConnected;
    private Boolean isOnline;
    private java.util.Date lastConnected;
    private java.util.Date lastEntered;
    private java.util.Date lastMessageDate;
    private String lastMessageText;
    private String partnerName;
    private String password;
    private String status;
    private Long unreadMessages;
    private Long roomId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RAChatSessionDao myDao;

    private RARoom room;
    private Long room__resolvedKey;

    private List<RAMessage> messages;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RAChatSession() {
    }

    public RAChatSession(Long id) {
        this.id = id;
    }

    public RAChatSession(Long id, String contactABID, String contactJID, Boolean isConnected, Boolean isOnline, java.util.Date lastConnected, java.util.Date lastEntered, java.util.Date lastMessageDate, String lastMessageText, String partnerName, String password, String status, Long unreadMessages, Long roomId) {
        this.id = id;
        this.contactABID = contactABID;
        this.contactJID = contactJID;
        this.isConnected = isConnected;
        this.isOnline = isOnline;
        this.lastConnected = lastConnected;
        this.lastEntered = lastEntered;
        this.lastMessageDate = lastMessageDate;
        this.lastMessageText = lastMessageText;
        this.partnerName = partnerName;
        this.password = password;
        this.status = status;
        this.unreadMessages = unreadMessages;
        this.roomId = roomId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRAChatSessionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContactABID() {
        return contactABID;
    }

    public void setContactABID(String contactABID) {
        this.contactABID = contactABID;
    }

    public String getContactJID() {
        return contactJID;
    }

    public void setContactJID(String contactJID) {
        this.contactJID = contactJID;
    }

    public Boolean getIsConnected() {
        return isConnected;
    }

    public void setIsConnected(Boolean isConnected) {
        this.isConnected = isConnected;
    }

    public Boolean getIsOnline() {
        return isOnline;
    }

    public void setIsOnline(Boolean isOnline) {
        this.isOnline = isOnline;
    }

    public java.util.Date getLastConnected() {
        return lastConnected;
    }

    public void setLastConnected(java.util.Date lastConnected) {
        this.lastConnected = lastConnected;
    }

    public java.util.Date getLastEntered() {
        return lastEntered;
    }

    public void setLastEntered(java.util.Date lastEntered) {
        this.lastEntered = lastEntered;
    }

    public java.util.Date getLastMessageDate() {
        return lastMessageDate;
    }

    public void setLastMessageDate(java.util.Date lastMessageDate) {
        this.lastMessageDate = lastMessageDate;
    }

    public String getLastMessageText() {
        return lastMessageText;
    }

    public void setLastMessageText(String lastMessageText) {
        this.lastMessageText = lastMessageText;
    }

    public String getPartnerName() {
        return partnerName;
    }

    public void setPartnerName(String partnerName) {
        this.partnerName = partnerName;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Long getUnreadMessages() {
        return unreadMessages;
    }

    public void setUnreadMessages(Long unreadMessages) {
        this.unreadMessages = unreadMessages;
    }

    public Long getRoomId() {
        return roomId;
    }

    public void setRoomId(Long roomId) {
        this.roomId = roomId;
    }

    /** To-one relationship, resolved on first access. */
    public RARoom getRoom() {
        Long __key = this.roomId;
        if (room__resolvedKey == null || !room__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RARoomDao targetDao = daoSession.getRARoomDao();
            RARoom roomNew = targetDao.load(__key);
            synchronized (this) {
                room = roomNew;
            	room__resolvedKey = __key;
            }
        }
        return room;
    }

    public void setRoom(RARoom room) {
        synchronized (this) {
            this.room = room;
            roomId = room == null ? null : room.getId();
            room__resolvedKey = roomId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RAMessage> getMessages() {
        if (messages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RAMessageDao targetDao = daoSession.getRAMessageDao();
            List<RAMessage> messagesNew = targetDao._queryRAChatSession_Messages(id);
            synchronized (this) {
                if(messages == null) {
                    messages = messagesNew;
                }
            }
        }
        return messages;
    }

    public void setMessages(List<RAMessage> messages) {
        this.messages = messages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessages() {
        messages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
