package co.roomapp.room.model;

import java.io.Serializable;
import java.util.List;
import co.roomapp.room.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import co.roomapp.room.manager.RACoreDataManager;
import de.greenrobot.dao.query.QueryBuilder;
// KEEP INCLUDES END
/**
 * Entity mapped to table RACONTACT_SECTION.
 */
public class RAContactSection implements Serializable {

    private Long id;
    private Long contactcount;
    private String title;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RAContactSectionDao myDao;

    private List<RAContact> contacts;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RAContactSection() {
    }

    public RAContactSection(Long id) {
        this.id = id;
    }

    public RAContactSection(Long id, Long contactcount, String title) {
        this.id = id;
        this.contactcount = contactcount;
        this.title = title;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRAContactSectionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getContactcount() {
        return contactcount;
    }

    public void setContactcount(Long contactcount) {
        this.contactcount = contactcount;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RAContact> getContacts() {
        if (contacts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RAContactDao targetDao = daoSession.getRAContactDao();
            List<RAContact> contactsNew = targetDao._queryRAContactSection_Contacts(id);
            synchronized (this) {
                if(contacts == null) {
                    contacts = contactsNew;
                }
            }
        }
        return contacts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetContacts() {
        contacts = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    public static ConcurrentHashMap getAllSections(){
        ConcurrentHashMap sections = new ConcurrentHashMap();
        List listContactSections = RACoreDataManager.getInstance().getDaoSession().getRAContactSectionDao().queryBuilder().list();
        Iterator i;
        for(i = listContactSections.iterator(); i.hasNext();){
            RAContactSection c = (RAContactSection)i.next();
            sections.putIfAbsent(c.getTitle(),c);
        }
        return  sections;
    }

    public static RAContactSection insertSection(String s){

        QueryBuilder db = RACoreDataManager.getInstance().getDaoSession().getRAContactSectionDao().queryBuilder();
        db.where(RAContactSectionDao.Properties.Title.eq(s));
        List<RAContactSection> sections = db.list();
        if(sections.size()>0){
            return sections.get(0);
        }else{
            RAContactSection cs = new RAContactSection();
            cs.title = s;
            RACoreDataManager.getInstance().getDaoSession().getRAContactSectionDao().insert(cs);
            return cs;
        }
    }
    // KEEP METHODS END

}
