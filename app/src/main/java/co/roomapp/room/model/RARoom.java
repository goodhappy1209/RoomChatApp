package co.roomapp.room.model;




import java.io.Serializable;
import java.lang.reflect.Array;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.concurrent.ConcurrentHashMap;

import co.roomapp.room.manager.RACoreDataManager;
import co.roomapp.room.manager.RAXMPPManager;
import co.roomapp.room.model.DaoSession;
import co.roomapp.room.utils.RAConstant;
import co.roomapp.room.utils.RAUtils;
import co.roomapp.room.utils.XMPPIQ;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import org.dom4j.Element;
import org.jivesoftware.smack.XMPPConnection;
import org.xmpp.packet.IQ;
import org.xmpp.packet.JID;

// KEEP INCLUDES END
/**
 * Entity mapped to table RAROOM.
 */
public class RARoom implements Serializable{

    private Long id;
    private String coverLocalPath;
    private String coverURL;
    private java.util.Date createdAt;
    private String hashtags;
    private Boolean iNewMessagesCount;
    private Boolean isAdmin;
    private Boolean isAdult;
    private Boolean isChatEnable;
    private Boolean isMute;
    private Boolean isPrivate;
    private Boolean isSearchable;
    private String language;
    private java.util.Date lastEntered;
    private java.util.Date lastmessageDate;
    private String lastMessageFromJID;
    private String lastMessageFromName;
    private String lastMessageText;
    private java.util.Date lastSync;
    private Double latitude;
    private java.util.Date lockDate;
    private Double longitude;
    private Long maxGuests;
    private Long membersCount;
    private String name;
    private String nickname;
    private String ownerDisplayName;
    private String ownerJID;
    private String password;
    private String roomappid;
    private String roomDescription;
    private String roomJID;
    private String roomkey;
    private Boolean toDelete;
    private Boolean toSave;
    private Long unreadMessage;
    private java.util.Date updatedAt;
    private Long lastMessageId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient RARoomDao myDao;

    private RAMessage lastMessage;
    private Long lastMessage__resolvedKey;

    private List<RAChatSession> chatsessions;
    private List<RARoomInvite> invites;
    private List<RANotification> notifications;
    private List<RAMessage> messages;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public RARoom() {
    }

    public RARoom(Long id) {
        this.id = id;
    }

    public RARoom(Long id, String coverLocalPath, String coverURL, java.util.Date createdAt, String hashtags, Boolean iNewMessagesCount, Boolean isAdmin, Boolean isAdult, Boolean isChatEnable, Boolean isMute, Boolean isPrivate, Boolean isSearchable, String language, java.util.Date lastEntered, java.util.Date lastmessageDate, String lastMessageFromJID, String lastMessageFromName, String lastMessageText, java.util.Date lastSync, Double latitude, java.util.Date lockDate, Double longitude, Long maxGuests, Long membersCount, String name, String nickname, String ownerDisplayName, String ownerJID, String password, String roomappid, String roomDescription, String roomJID, String roomkey, Boolean toDelete, Boolean toSave, Long unreadMessage, java.util.Date updatedAt, Long lastMessageId) {
        this.id = id;
        this.coverLocalPath = coverLocalPath;
        this.coverURL = coverURL;
        this.createdAt = createdAt;
        this.hashtags = hashtags;
        this.iNewMessagesCount = iNewMessagesCount;
        this.isAdmin = isAdmin;
        this.isAdult = isAdult;
        this.isChatEnable = isChatEnable;
        this.isMute = isMute;
        this.isPrivate = isPrivate;
        this.isSearchable = isSearchable;
        this.language = language;
        this.lastEntered = lastEntered;
        this.lastmessageDate = lastmessageDate;
        this.lastMessageFromJID = lastMessageFromJID;
        this.lastMessageFromName = lastMessageFromName;
        this.lastMessageText = lastMessageText;
        this.lastSync = lastSync;
        this.latitude = latitude;
        this.lockDate = lockDate;
        this.longitude = longitude;
        this.maxGuests = maxGuests;
        this.membersCount = membersCount;
        this.name = name;
        this.nickname = nickname;
        this.ownerDisplayName = ownerDisplayName;
        this.ownerJID = ownerJID;
        this.password = password;
        this.roomappid = roomappid;
        this.roomDescription = roomDescription;
        this.roomJID = roomJID;
        this.roomkey = roomkey;
        this.toDelete = toDelete;
        this.toSave = toSave;
        this.unreadMessage = unreadMessage;
        this.updatedAt = updatedAt;
        this.lastMessageId = lastMessageId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRARoomDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getCoverLocalPath() {
        return coverLocalPath;
    }

    public void setCoverLocalPath(String coverLocalPath) {
        this.coverLocalPath = coverLocalPath;
    }

    public String getCoverURL() {
        return coverURL;
    }

    public void setCoverURL(String coverURL) {
        this.coverURL = coverURL;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public String getHashtags() {
        return hashtags;
    }

    public void setHashtags(String hashtags) {
        this.hashtags = hashtags;
    }

    public Boolean getINewMessagesCount() {
        return iNewMessagesCount;
    }

    public void setINewMessagesCount(Boolean iNewMessagesCount) {
        this.iNewMessagesCount = iNewMessagesCount;
    }

    public Boolean getIsAdmin() {
        return isAdmin;
    }

    public void setIsAdmin(Boolean isAdmin) {
        this.isAdmin = isAdmin;
    }

    public Boolean getIsAdult() {
        return isAdult;
    }

    public void setIsAdult(Boolean isAdult) {
        this.isAdult = isAdult;
    }

    public Boolean getIsChatEnable() {
        return isChatEnable;
    }

    public void setIsChatEnable(Boolean isChatEnable) {
        this.isChatEnable = isChatEnable;
    }

    public Boolean getIsMute() {
        return isMute;
    }

    public void setIsMute(Boolean isMute) {
        this.isMute = isMute;
    }

    public Boolean getIsPrivate() {
        return isPrivate;
    }

    public void setIsPrivate(Boolean isPrivate) {
        this.isPrivate = isPrivate;
    }

    public Boolean getIsSearchable() {
        return isSearchable;
    }

    public void setIsSearchable(Boolean isSearchable) {
        this.isSearchable = isSearchable;
    }

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    public java.util.Date getLastEntered() {
        return lastEntered;
    }

    public void setLastEntered(java.util.Date lastEntered) {
        this.lastEntered = lastEntered;
    }

    public java.util.Date getLastmessageDate() {
        return lastmessageDate;
    }

    public void setLastmessageDate(java.util.Date lastmessageDate) {
        this.lastmessageDate = lastmessageDate;
    }

    public String getLastMessageFromJID() {
        return lastMessageFromJID;
    }

    public void setLastMessageFromJID(String lastMessageFromJID) {
        this.lastMessageFromJID = lastMessageFromJID;
    }

    public String getLastMessageFromName() {
        return lastMessageFromName;
    }

    public void setLastMessageFromName(String lastMessageFromName) {
        this.lastMessageFromName = lastMessageFromName;
    }

    public String getLastMessageText() {
        return lastMessageText;
    }

    public void setLastMessageText(String lastMessageText) {
        this.lastMessageText = lastMessageText;
    }

    public java.util.Date getLastSync() {
        return lastSync;
    }

    public void setLastSync(java.util.Date lastSync) {
        this.lastSync = lastSync;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public java.util.Date getLockDate() {
        return lockDate;
    }

    public void setLockDate(java.util.Date lockDate) {
        this.lockDate = lockDate;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public Long getMaxGuests() {
        return maxGuests;
    }

    public void setMaxGuests(Long maxGuests) {
        this.maxGuests = maxGuests;
    }

    public Long getMembersCount() {
        return membersCount;
    }

    public void setMembersCount(Long membersCount) {
        this.membersCount = membersCount;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getNickname() {
        return nickname;
    }

    public void setNickname(String nickname) {
        this.nickname = nickname;
    }

    public String getOwnerDisplayName() {
        return ownerDisplayName;
    }

    public void setOwnerDisplayName(String ownerDisplayName) {
        this.ownerDisplayName = ownerDisplayName;
    }

    public String getOwnerJID() {
        return ownerJID;
    }

    public void setOwnerJID(String ownerJID) {
        this.ownerJID = ownerJID;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRoomappid() {
        return roomappid;
    }

    public void setRoomappid(String roomappid) {
        this.roomappid = roomappid;
    }

    public String getRoomDescription() {
        return roomDescription;
    }

    public void setRoomDescription(String roomDescription) {
        this.roomDescription = roomDescription;
    }

    public String getRoomJID() {
        return roomJID;
    }

    public void setRoomJID(String roomJID) {
        this.roomJID = roomJID;
    }

    public String getRoomkey() {
        return roomkey;
    }

    public void setRoomkey(String roomkey) {
        this.roomkey = roomkey;
    }

    public Boolean getToDelete() {
        return toDelete;
    }

    public void setToDelete(Boolean toDelete) {
        this.toDelete = toDelete;
    }

    public Boolean getToSave() {
        return toSave;
    }

    public void setToSave(Boolean toSave) {
        this.toSave = toSave;
    }

    public Long getUnreadMessage() {
        return unreadMessage;
    }

    public void setUnreadMessage(Long unreadMessage) {
        this.unreadMessage = unreadMessage;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public Long getLastMessageId() {
        return lastMessageId;
    }

    public void setLastMessageId(Long lastMessageId) {
        this.lastMessageId = lastMessageId;
    }

    /** To-one relationship, resolved on first access. */
    public RAMessage getLastMessage() {
        Long __key = this.lastMessageId;
        if (lastMessage__resolvedKey == null || !lastMessage__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RAMessageDao targetDao = daoSession.getRAMessageDao();
            RAMessage lastMessageNew = targetDao.load(__key);
            synchronized (this) {
                lastMessage = lastMessageNew;
            	lastMessage__resolvedKey = __key;
            }
        }
        return lastMessage;
    }

    public void setLastMessage(RAMessage lastMessage) {
        synchronized (this) {
            this.lastMessage = lastMessage;
            lastMessageId = lastMessage == null ? null : lastMessage.getId();
            lastMessage__resolvedKey = lastMessageId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RAChatSession> getChatsessions() {
        if (chatsessions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RAChatSessionDao targetDao = daoSession.getRAChatSessionDao();
            List<RAChatSession> chatsessionsNew = targetDao._queryRARoom_Chatsessions(id);
            synchronized (this) {
                if(chatsessions == null) {
                    chatsessions = chatsessionsNew;
                }
            }
        }
        return chatsessions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChatsessions() {
        chatsessions = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RARoomInvite> getInvites() {
        if (invites == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RARoomInviteDao targetDao = daoSession.getRARoomInviteDao();
            List<RARoomInvite> invitesNew = targetDao._queryRARoom_Invites(id);
            synchronized (this) {
                if(invites == null) {
                    invites = invitesNew;
                }
            }
        }
        return invites;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetInvites() {
        invites = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RANotification> getNotifications() {
        if (notifications == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RANotificationDao targetDao = daoSession.getRANotificationDao();
            List<RANotification> notificationsNew = targetDao._queryRARoom_Notifications(id);
            synchronized (this) {
                if(notifications == null) {
                    notifications = notificationsNew;
                }
            }
        }
        return notifications;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetNotifications() {
        notifications = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<RAMessage> getMessages() {
        if (messages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RAMessageDao targetDao = daoSession.getRAMessageDao();
            List<RAMessage> messagesNew = targetDao._queryRARoom_Messages(id);
            synchronized (this) {
                if(messages == null) {
                    messages = messagesNew;
                }
            }
        }
        return messages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessages() {
        messages = null;
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link de.greenrobot.dao.AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public static XMPPIQ getAllRoomIQ(){


        try{
            IQ iq = new IQ();
            iq.setType(IQ.Type.get);

            Element query = iq.setChildElement("query", "room:iq:room");
            query.addAttribute("all","1");

            ArrayList<RARoom> rooms = RARoom.getAllRooms();

            Iterator i;
            for(i = rooms.iterator(); i.hasNext();){
                RARoom c = (RARoom)i.next();
                Element item = query.addElement("item");
                item.addAttribute("jid",new JID(c.getRoomJID()).toBareJID());
                item.addAttribute("lastEntered",Long.toString(c.getLastEntered().getTime()/1000));
                if(c.getLastmessageDate()==null){
                    item.addAttribute("lastMessageDate","0");
                }else{
                    item.addAttribute("lastMessageDate",Long.toString(c.getLastmessageDate().getTime()/1000));
                }

            }


            return new XMPPIQ(iq);


        }catch(Exception e){
            return  null;
        }



    }

    public static ArrayList<RARoom> getAllRooms(){
        ArrayList<RARoom> rooms = new ArrayList<RARoom>();
        List listRooms = RACoreDataManager.getInstance().getDaoSession().getRARoomDao().queryBuilder().orderDesc(RARoomDao.Properties.CreatedAt).list();
        Iterator i;
        for(i = listRooms.iterator(); i.hasNext();){
            RARoom c = (RARoom)i.next();
            rooms.add(c);
        }
        return  rooms;
    }

    public static ArrayList<RARoom> getListRooms(){
        ArrayList<RARoom> rooms = new ArrayList<RARoom>();
        List listRooms = RACoreDataManager.getInstance().getDaoSession().getRARoomDao().queryBuilder().orderDesc(RARoomDao.Properties.LastmessageDate).orderDesc(RARoomDao.Properties.UpdatedAt).list();
        Iterator i;
        for(i = listRooms.iterator(); i.hasNext();){
            RARoom c = (RARoom)i.next();
            rooms.add(c);
        }
        return  rooms;
    }

    public static RARoom withJID(JID roomJID){

        List<RARoom> result = null;
        try {

            result = RACoreDataManager.getInstance().getDaoSession().getRARoomDao().queryBuilder().where(RARoomDao.Properties.Roomappid.eq(roomJID.getNode())).limit(1).list();
        }catch(Exception e){
            System.out.println(e.getMessage());
        }

        if(result.size()>0){



            return result.get(0);
        }else{
            return null;
        }


    }

    public static RARoom elementToRoom(Element element){



        String value = element.attributeValue("jid");

        boolean isNew = false;

        JID roomJID = new JID(value);
        String action = element.attributeValue("add","add");

        RARoom room = RARoom.withJID(roomJID);

        if(room != null && action.equalsIgnoreCase("delete")){
            room.delete();
        }

        if(action.equalsIgnoreCase("add")){
            if(room== null) {
                isNew = true;
                room = new RARoom();
                room.setRoomJID(roomJID.toBareJID());
                room.setupRoomappid(roomJID.getNode());
            }
            if(room.getLastEntered() == null){
                room.setLastEntered(new Date());
            }

            value = element.attributeValue("coverURL");
            if(value != null){
                room.setCoverURL(RAUtils.formattedMediaURL(value));
            }

            value = element.attributeValue("name");
            if(value != null){
                room.setName(value);
            }

            value = element.attributeValue("hashtags");
            if(value != null){
                room.setHashtags(value);
            }

            value = element.attributeValue("ownerJID");
            if(value != null){
                room.setOwnerJID(value);
            }

            value = element.attributeValue("ownerDisplayName");
            if(value != null){
                room.setOwnerDisplayName(value);
            }

            value = element.attributeValue("roomkey");
            if(value != null){
                try {
                    room.setRoomkey(RAUtils.encryptLocal(value));
                } catch (Exception e) {

                }
            }

            value = element.attributeValue("is_private","1");
            if(value != null){
                room.setIsPrivate(Boolean.valueOf(value));
            }

            value = element.attributeValue("is_adult","0");
            if(value != null){
                room.setIsAdult(Boolean.valueOf(value));
            }

            value = element.attributeValue("language");
            if(value != null){
                room.setLanguage(value);
            }

            value = element.attributeValue("latitude");
            if(value != null){
                room.setLatitude(Double.valueOf(value));
            }

            value = element.attributeValue("longitude");
            if(value != null){
                room.setLongitude(Double.valueOf(value));
            }

            value = element.attributeValue("is_searchable","0");
            if(value != null){
                room.setIsSearchable(Boolean.valueOf(value));
            }

            value = element.attributeValue("chat_enabled","1");
            if(value != null){
                room.setIsChatEnable(Boolean.valueOf(value));
            }

            value = element.attributeValue("members");
            if(value != null){
                room.setMembersCount(Long.valueOf(value));
            }

            value = element.attributeValue("max_users");
            if(value != null){
                room.setMaxGuests(Long.valueOf(value));
            }

            value = element.attributeValue("lock_date");
            if(value != null){
                room.setLockDate(new Date(new Timestamp(Long.valueOf(value)*1000).getTime()));;
            }

            value = element.attributeValue("createdAt");
            if(value != null){
                room.setCreatedAt(new Date(new Timestamp(Long.valueOf(value)*1000).getTime()));
            }

            value = element.attributeValue("updatedAt");
            if(value != null){
                room.setCreatedAt(new Date(new Timestamp(Long.valueOf(value)*1000).getTime()));
            }

            value = element.attributeValue("countUnread");
            if(value != null){
                room.setUnreadMessage((room.getLastEntered() == null) ? 0 : Long.valueOf(value));
            }

            Element description = element.element("description");
            if(description != null){
                room.setRoomDescription(description.getTextTrim());
            }else{
                room.setRoomDescription(room.getName());
            }

            String user = new JID(RAXMPPManager.getInstance().getXmppStream().getUser()).toBareJID();
            if(room.getOwnerJID().equalsIgnoreCase(RAXMPPManager.getInstance().getXmppStream().getUser())){
                room.setIsAdmin(true);
            }else{
                room.setIsAdmin(false);
            }

            if(isNew){
                RACoreDataManager.getInstance().getDaoSession().getRARoomDao().insert(room);
            }else{
                room.update();
            }

        }



        return room;
    }

    public void setupRoomappid(String roomappid){
        this.roomappid = roomappid;
        this.roomJID = roomappid+"@"+ RAConstant.CONFERENCE;
        this.coverURL = RARoom.coverURL(roomappid);
    }

    public static String coverURL(String roomappid){
        return "http://"+RAConstant.MEDIA_HOST+"/asset/Rooms/"+roomappid+"/Cover.jpg";
    }


    // KEEP METHODS END

}
